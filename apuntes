{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/juango15/Classroom-notes/blob/main/apuntes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Markdown\n",
        "\n",
        "Markdow en pocas palablar son casillas de texto"
      ],
      "metadata": {
        "id": "kBiJ8TJ27upH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Titulos\n",
        "\n",
        "dependiendo de cuantos numerale pongas (#) tendras un tamaño de titulo diferente, entre mas pongas mas pequeño seran y se les llama por h#, iendo de h1 a h6\n",
        "\n",
        "h1:\n",
        "# A\n",
        "h2\n",
        "## A\n",
        "h3\n",
        "### A\n",
        "h4\n",
        "#### A\n",
        "h5\n",
        "##### A\n",
        "h6\n",
        "###### A"
      ],
      "metadata": {
        "id": "Zsfq6dPdASuF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## enfasis de texto\n",
        "\n",
        "con esto se refiere a todas aquellas cosas que cambian la forma de una palabra u oracion\n",
        "\n",
        "para esto se pone un par de caracteres especiales al rededor de la palabra, uno de cada lado\n",
        "\n",
        "un asterisco: *Cursiva*\n",
        "\n",
        "** : **Negrita**\n",
        "\n",
        " _ :  _Cursiva_\n",
        "\n",
        " ~ : ~tachado~\n",
        "\n",
        "coma al reves : ``codigo``\n"
      ],
      "metadata": {
        "id": "3nzQAyUfHiPG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## diviciones\n",
        "\n",
        "si pones tres guiones seguidos o tres asteriscos seguidos haras una divicion\n",
        "\n",
        "***\n",
        "---\n",
        "\n",
        "asi ☝"
      ],
      "metadata": {
        "id": "9QJqZJ_yhnfv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Python"
      ],
      "metadata": {
        "id": "qlPK-d6s7nKM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## expresiones booleanas\n",
        "\n",
        "son afirmaciones que se puede hacer con la computadra que no serian una opinion sino un dato presiso (hasta donde pueda llegar la computadora)\n",
        "\n",
        "<br>\n",
        "se comparan dos entradas numericas y mediante unos caracteres llamados operadores logicos se define si la congetura es falsa o verdadera\n",
        "\n"
      ],
      "metadata": {
        "id": "azjza1QxG0OF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "los mas simples de todos son mayor que (>) y menor que (<) que definen por medio de la comparacion el orden respectivo de dos numeros\n",
        "\n",
        "2 es _mayor que_ 56 = 2>56\n",
        "\n",
        "36 es _menor que_ 101 = 36<101\n",
        "\n",
        "\n",
        "ya depende de la computadora determinar si eso es falso o verdadero"
      ],
      "metadata": {
        "id": "IG9v9LJ9vqXJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10>33\n",
        "b = 56<100\n",
        "\n",
        "print (\"a es\", a)\n",
        "\n",
        "print (\"b es\", b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eAgRBw88yRIH",
        "outputId": "b5715402-7a27-4f0a-a08c-4a4c1508c578"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a es False\n",
            "b es True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "aparte de esos dos tambien hay otros operadores logicos que cumplen otras funciones\n",
        "\n",
        "`(==)`\n",
        "\n",
        "el igual igua compara dos numeros y te dice si son iguales, coloca doble para aclarar que los valores se estan comparando y no igualando\n",
        "\n",
        "`(!=)`\n",
        "\n",
        "desigual, este se utiliza para que al momento de comparar te diga si los valores son desiguales o no\n",
        "\n",
        "`(<=)`\n",
        "\n",
        "menor o igual que compara dos valores y determina si el de la izquierda es menor o igual al de la derecha\n",
        "\n",
        "`(>=)`\n",
        "\n",
        "mayor o igual que compara dos valores y determina si el de la izquierda es mayor o igual al de la derecha\n"
      ],
      "metadata": {
        "id": "c9m9Bke-yR1v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = 3\n",
        "b = 6\n",
        "\n",
        "print (a==b)\n",
        "print (a!=b)\n",
        "print (a<=b)\n",
        "print (a>=b)"
      ],
      "metadata": {
        "id": "F10Yb0DPG4dI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "52923fd4-bb5f-4d47-e878-f7a99ce379a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n",
            "True\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "tambien hay unos que dependen de otro para ser falsos o verdaderos\n",
        "\n",
        "\n",
        "`AND`\n",
        "\n",
        "Empleado para asociar dos términos o frases, validando que ambos valores booleanos sean verdaderos.\n",
        "<br>\n",
        "\n",
        "`OR`\n",
        "\n",
        "Asocia dos términos o frases, validando que al menos uno de los dos valores sea verdadero.\n",
        "<br>\n",
        "\n",
        "`NOT`\n",
        "\n",
        "Ejecuta bloques de código cuando una condición es falsa."
      ],
      "metadata": {
        "id": "4dgTlePW1Dqp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = True\n",
        "b = False\n",
        "\n",
        "print (\"AND:\")\n",
        "print (a and b)\n",
        "print (a and a)\n",
        "print (b and b)\n",
        "\n",
        "print (\" \")\n",
        "\n",
        "print (\"OR:\")\n",
        "print (a or b)\n",
        "print (a or a)\n",
        "print (b or b)\n",
        "\n",
        "print (\" \")\n",
        "\n",
        "print (\"not\")\n",
        "\n",
        "not a\n",
        "not b"
      ],
      "metadata": {
        "id": "Op1WbpZwLJO6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70e6d2ee-55c6-450e-e027-264533a29979"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AND:\n",
            "False\n",
            "True\n",
            "False\n",
            " \n",
            "OR:\n",
            "True\n",
            "True\n",
            "False\n",
            " \n",
            "not\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## inputs\n",
        "\n",
        "son estradas de usuario por consola"
      ],
      "metadata": {
        "id": "HDjX7V9mPTNP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "firstname = input (\"nombre:\")\n",
        "lastname = input (\"apellido:\")\n",
        "fullname = firstname + \" \" + lastname\n",
        "\n",
        "print (\"Hola\", fullname, \"bienvenido\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mePgERm1PoMW",
        "outputId": "2ce686b3-14dc-4d8a-eb42-ad142c8830c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nombre:juan pablo\n",
            "apellido:gonzalez\n",
            "Hola juan pablo gonzalez bienvenido\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Aunque los inputs solo son salidas de texto y aunque pongas un numero no tendra un valor numerico"
      ],
      "metadata": {
        "id": "FALdReyt1vkl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_1 = input (\"ingrese el primer numero:\")\n",
        "num_2 = input (\"ingrese el segundo numero:\")\n",
        "resultado = num_1 + num_2\n",
        "\n",
        "print (\"la suma es:\", resultado)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o_B-hw2B9XNP",
        "outputId": "8cde305f-3e9e-49e7-f987-b6078c09e37c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingrese el primer numero3\n",
            "ingrese el segundo numero5\n",
            "la suma es: 35\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "para solucionar esto se escribe el input dentro de un valor entero\n",
        "\n",
        "osea\n",
        "\n",
        "```\n",
        "int (input (\"ingrese un numero\"))\n",
        "```\n",
        "o float si la variable no es entera\n",
        "\n",
        "```\n",
        "float (input (\"ingrese un numero\"))\n",
        "```\n"
      ],
      "metadata": {
        "id": "bRWOsLrR-03V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_1 = int (input (\"ingrese el primer numero:\"))\n",
        "num_2 = int (input (\"ingrese el segundo numero:\"))\n",
        "resultado = num_1 + num_2\n",
        "\n",
        "print (\"la suma es:\", resultado)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_PVRjOQo_aER",
        "outputId": "bee63c28-7a7a-4630-9cf7-5f8b7013e725"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingrese el primer numero3\n",
            "ingrese el segundo numero5\n",
            "la suma es: 8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Condicionales\n",
        "\n",
        "son lineas de codigo que se  solo si se cumple una condici"
      ],
      "metadata": {
        "id": "8yPWJG45xMZj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### If\n",
        "\n",
        "es el condicional mas sencillo, consta de una condicion que si se cumple pasa a hacer una cerie de instrucciones y si no se cumple hace otra serie de instrucciones"
      ],
      "metadata": {
        "id": "SAOubWbc0OrM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 3\n",
        "\n",
        "if x > 10:\n",
        "  print (\"su numero es mayor que diez\")\n",
        "\n",
        "else:\n",
        "  print (\"su numero es menor que diez\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s7EADFwH84rl",
        "outputId": "d79fb317-01c7-4242-8592-0342582ac78f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "su numero es menor que diez\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### While\n",
        "es una condicional donde se ejecuta solamente si se cumple una condicion especifica\n",
        "\n",
        "se recomienda no poner condicionales extrictos\n",
        "\n",
        "ejemplo: x cosa se hace si x valor es igual a cinco\n",
        "\n"
      ],
      "metadata": {
        "id": "3a17jH-iz3ks"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 36\n",
        "\n",
        "while x >= 100:\n",
        "  print (\"x es igual o mayor que cien\")\n",
        "\n",
        "print (\"su numero es menor que cien\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MNSU7IdC5aOu",
        "outputId": "bbd12e02-6eee-4bae-ee3c-801150149f08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "su numero es menor que cien\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### case\n",
        "\n",
        "esta condicional es poco usada, pero le da respuestas espesificas a casos en concretos. <br> Por ejemplo: si te dicen que escojas un numero del 1 al 5 para calificar la asistencia de un hotel y que despues te mande un mensaje dependiendo de la calificacion que elijas"
      ],
      "metadata": {
        "id": "5rj1ESs_DyHb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "calificacion = 4\n",
        "\n",
        "match calificacion:\n",
        "\n",
        "  case 1:\n",
        "    print (\"lamentamos el mal servicio, mejoraremos cuando vuelva\")\n",
        "\n",
        "  case 2:\n",
        "    print (\"disculpe nuestros malos modales, esperamos su regreso\")\n",
        "\n",
        "  case 3:\n",
        "    print (\"dejenos sus sugerencias y mejoraremos para atenderlo mejor\")\n",
        "\n",
        "  case 4:\n",
        "    print (\"espero que la haya pasado bien en nuestro hotel, feliz viaje\")\n",
        "\n",
        "  case 5:\n",
        "    print(\"muchas gracias por su calificación, esperamos que vuelva pronto\")\n",
        "\n",
        "if calificacion > 5:\n",
        "  print(\"es muy generoso, a la próxima la casa invita ;)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kFNywBQkPhYN",
        "outputId": "27619411-1477-4f8c-f58b-45ba0164ffb6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "espero que la haya pasado bien en nuestro hotel, feliz viaje\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## ciclicos"
      ],
      "metadata": {
        "id": "84O3Oh5g3lb8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### while (como repetitivo)\n",
        "\n",
        "a pesar de ser un condicional se puede usar como un ciclo si le incluye una variale que se actualiza constante mente, y que para cuando llega a un valor en especifico <br> si x valor cumple una condicion se repetira una accion hasta que deje de cumplir la condicion"
      ],
      "metadata": {
        "id": "_CfuuMQt3yeP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = int (input (\"ingrese un numero:\"))\n",
        "num_fal = 0\n",
        "\n",
        "while x != 10:\n",
        "  x += 1\n",
        "  num_fal += 1\n",
        "\n",
        "print(\"a su numero le falta\", num_fal, \"unidades para ser 10\")"
      ],
      "metadata": {
        "id": "3e-d3EtYCRr6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0df8a97a-07b6-4a38-fe4b-f1311e0ae1a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingrese un numero:4\n",
            "a su numero le falta 6 unidades para ser 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### for\n",
        "\n",
        "es una estructura repetitiva definida, en pocas palabras, repites un numero de veces concreto la accion\n",
        "\n",
        "para saber si lo tiene que usar preguntate ¿sabes cuantas veces tienes que repetir la accion?\n",
        "\n",
        "si es asi establese desde donde inicias y hasta donde terminas\n",
        "si no es asi utilisa while"
      ],
      "metadata": {
        "id": "l8SMJ7JX0Tpn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sum_n = 0\n",
        "num_not = 0\n",
        "\n",
        "\n",
        "for i in range (3):\n",
        "  x = float(input(\"ingrese el primera nota:\"))\n",
        "  num_not += 1\n",
        "  sum_n += x\n",
        "\n",
        "print (\"su promedio es de:\", sum_n/num_not)\n",
        "\n"
      ],
      "metadata": {
        "id": "DcoRD_Oq8Q3y",
        "outputId": "ef404250-c225-4bc1-ba46-d90dc680cd87",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingrese el primera nota:3.3\n",
            "ingrese el primera nota:4.7\n",
            "ingrese el primera nota:4\n",
            "su promedio es de: 4.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### repeat\n",
        "\n",
        "de todos es el mas simple, repite x cantidad de veces una accion (solo es para complementar for)\n"
      ],
      "metadata": {
        "id": "eEiviJG_1uY9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## ejercisio"
      ],
      "metadata": {
        "id": "_prRCd1Nz1zm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Ejercisio 1\n",
        "\n",
        "hacer una calculadora donde tu ingresas un numero indefinido de numeros y al final aparesca la suma de todos ellos\n",
        "\n",
        "```\n",
        "program calculadora_de_sumas\n",
        "\n",
        "start\n",
        "  Declare Real x\n",
        "  constant sum_x = 0\n",
        "\n",
        "  Display \"bienvenido a la calculadora de sumas\"\n",
        "  Display \"ingrese un numero cuando se le indique, y si desea terminar la suma escriba \"0\"\"\n",
        "  Display \"ingrese el primer numero:\"\n",
        "  Input x\n",
        "\n",
        "  While x != 0 than\n",
        "    Display \"ingrese el siguiente numero\"\n",
        "    Input x\n",
        "    Set sum_x += sum_x + x\n",
        "  end while\n",
        "\n",
        "  Display \"la suma de todos los numeros es:\", sum_x\n",
        "\n",
        "stop\n",
        "```"
      ],
      "metadata": {
        "id": "BwhzBt-j7Eyt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "sum_x = 0\n",
        "\n",
        "print (\"bienvenido a la calculadora de sumas ingrese un numero cuando se le indique\")\n",
        "print (\"si desea terminar la suma escriba 0\" )\n",
        "print (\" \")\n",
        "\n",
        "x = float(input(\"ingrese el primer numero:\"))\n",
        "\n",
        "\n",
        "while x>0:\n",
        "  x = float(input(\"ingrese el siguiente numero:\"))\n",
        "  sum_x += x\n",
        "\n",
        "print (\" \")\n",
        "print (\"la suma de todos los numeros es:\", sum_x)\n"
      ],
      "metadata": {
        "id": "7-Vo1kBq78ep",
        "outputId": "50ac5a46-af4b-4a8f-f646-1f482c5b6d39",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "bienvenido a la calculadora de sumas ingrese un numero cuando se le indique\n",
            "si desea terminar la suma escriba 0\n",
            " \n",
            "ingrese el primer numero:3.3\n",
            "ingrese el siguiente numero:2.5\n",
            "ingrese el siguiente numero:1.2\n",
            "ingrese el siguiente numero:44\n",
            "ingrese el siguiente numero:0\n",
            " \n",
            "la suma de todos los numeros es: 47.7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Ejercisio 2\n",
        "\n",
        "hacer un algoritmo donde se halle el promedio ponderado de una serie de notas\n",
        "\n",
        "seudo codigo\n",
        "\n",
        "```\n",
        "program promedio_ponderado\n",
        "strat\n",
        "  Declare Real N\n",
        "  Declare Float nota, peso, promedio, sum_nota, sum_peso\n",
        "\n",
        "  Set sum_not = 0\n",
        "  Set sum_pes = 0\n",
        "\n",
        "  Display \"ingrese el numero de notas\"\n",
        "  Input N\n",
        "  For i to N\n",
        "    Display \"ingrese la nota\"\n",
        "    Input nota\n",
        "    Set sum_not += nota\n",
        "\n",
        "    Display \"ingrese el peso (en porcentaje)\"\n",
        "    Input peso\n",
        "    Set sum_pes += peso\n",
        "\n",
        "  End for\n",
        "\n",
        "  Set prom = sum_not/(sum_pes/100)\n",
        "\n",
        "  Display \"prom\"\n",
        "\n",
        "stop\n",
        "\n",
        "```"
      ],
      "metadata": {
        "id": "h8ebZhUF7rZI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sum_not = float (0)\n",
        "sum_pes = float (0)\n",
        "\n",
        "N = int (input (\"ingrese el numero de notas:\"))\n",
        "\n",
        "for i in range(N):\n",
        "  nota = float (input (\"ingrese el numero de notas:\"))\n",
        "  sum_not += nota\n",
        "\n",
        "  peso = float (input (\"ingrese el peso (en porcentaje):\"))\n",
        "  sum_pes += peso\n",
        "\n",
        "  prom = sum_not/(sum_pes/100)\n",
        "\n",
        "print (prom)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VRFMfQHclmnT",
        "outputId": "debd70ef-5016-4584-8848-64e97c736ea1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingrese el numero de notas: 3\n",
            "ingrese el numero de notas:4.75\n",
            "ingrese el peso (en porcentaje):10\n",
            "ingrese el numero de notas:3.4\n",
            "ingrese el peso (en porcentaje):10\n",
            "ingrese el numero de notas:2.0\n",
            "ingrese el peso (en porcentaje):20\n",
            "25.375\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "apuntes",
      "provenance": [],
      "collapsed_sections": [
        "kBiJ8TJ27upH",
        "azjza1QxG0OF",
        "HDjX7V9mPTNP",
        "8yPWJG45xMZj",
        "84O3Oh5g3lb8"
      ],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}